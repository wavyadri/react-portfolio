{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adria\\\\Documents\\\\coding projects\\\\adriana-portfolio-react\\\\src\\\\components\\\\Typewriter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Typewriter = () => {\n  _s();\n\n  let text = ['Web Developer', 'Problem Solver', 'Team Player'];\n  let count = 1;\n  let textIndex = 0;\n  const [currentWord, setCurrentWord] = useState('');\n  const [isTyping, setIsTyping] = useState(false); // const [isDeleting, setIsDeleting] = useState(false);\n\n  const typing = () => {\n    setCurrentWord(text.slice(0, count));\n    count++;\n\n    if (current === text[textIndex]) {\n      setIsDeleting(true);\n    }\n  };\n\n  if (setIsTyping) {\n    typing();\n  }\n\n  const deleting = () => {};\n\n  if (setIsDeleting) {\n    deleting();\n  }\n\n  useEffect(() => {\n    // setIsDeleting(false);\n    setIsTyping(true);\n\n    if (textIndex > text.length) {\n      textIndex = 0;\n    }\n  }, [textIndex]); // const typeEffect = () => {\n  //     if(count > text[wordNum].length) {\n  //         wordNum++;\n  //         count = 0;\n  //     }\n  //     if(wordNum === text.length) {\n  //         wordNum = 0;\n  //     }\n  //     const characters = text[wordNum].slice(0, count);\n  //     setCurrentWord(characters);\n  //     count++;\n  // }\n  // useEffect(() => {\n  //     setInterval(typeEffect, 250)\n  // }, [])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: currentWord\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Typewriter, \"KjpVYjeKnUcr4dsGRvJMP6HOSYc=\");\n\n_c = Typewriter;\nexport default Typewriter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Typewriter\");","map":{"version":3,"sources":["C:/Users/adria/Documents/coding projects/adriana-portfolio-react/src/components/Typewriter.js"],"names":["React","useState","useEffect","Typewriter","text","count","textIndex","currentWord","setCurrentWord","isTyping","setIsTyping","typing","slice","current","setIsDeleting","deleting","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,MAAIC,IAAI,GAAG,CAAC,eAAD,EAAkB,gBAAlB,EAAoC,aAApC,CAAX;AACA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,SAAS,GAAG,CAAhB;AAEA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC,CANqB,CAOrB;;AAEA,QAAMU,MAAM,GAAG,MAAM;AACjBH,IAAAA,cAAc,CAACJ,IAAI,CAACQ,KAAL,CAAW,CAAX,EAAcP,KAAd,CAAD,CAAd;AACAA,IAAAA,KAAK;;AACL,QAAGQ,OAAO,KAAKT,IAAI,CAACE,SAAD,CAAnB,EAAgC;AAC5BQ,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH;AACJ,GAND;;AAQA,MAAIJ,WAAJ,EAAiB;AACbC,IAAAA,MAAM;AACT;;AAED,QAAMI,QAAQ,GAAG,MAAM,CAEtB,CAFD;;AAIA,MAAID,aAAJ,EAAmB;AACfC,IAAAA,QAAQ;AACX;;AAEDb,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAQ,IAAAA,WAAW,CAAC,IAAD,CAAX;;AACA,QAAIJ,SAAS,GAAGF,IAAI,CAACY,MAArB,EAA6B;AACzBV,MAAAA,SAAS,GAAG,CAAZ;AACH;AAEJ,GAPQ,EAON,CAACA,SAAD,CAPM,CAAT,CA7BqB,CAwCrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA,sBACI;AAAA,cACKC;AADL;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA7DD;;GAAMJ,U;;KAAAA,U;AA+DN,eAAeA,UAAf","sourcesContent":["import React, {useState, useEffect} from 'react'\r\n\r\nconst Typewriter = () => {\r\n    let text = ['Web Developer', 'Problem Solver', 'Team Player'];\r\n    let count = 1;\r\n    let textIndex = 0;\r\n\r\n    const [currentWord, setCurrentWord] = useState('');\r\n    const [isTyping, setIsTyping] = useState(false);\r\n    // const [isDeleting, setIsDeleting] = useState(false);\r\n\r\n    const typing = () => {\r\n        setCurrentWord(text.slice(0, count))\r\n        count++;\r\n        if(current === text[textIndex]) {\r\n            setIsDeleting(true)\r\n        }\r\n    }\r\n\r\n    if (setIsTyping) {\r\n        typing();\r\n    }\r\n\r\n    const deleting = () => {\r\n\r\n    }\r\n\r\n    if (setIsDeleting) {\r\n        deleting();\r\n    }\r\n\r\n    useEffect(() => {\r\n        // setIsDeleting(false);\r\n        setIsTyping(true);\r\n        if (textIndex > text.length) {\r\n            textIndex = 0;\r\n        }\r\n\r\n    }, [textIndex])\r\n\r\n    \r\n\r\n    // const typeEffect = () => {\r\n    //     if(count > text[wordNum].length) {\r\n    //         wordNum++;\r\n    //         count = 0;\r\n    //     }\r\n    //     if(wordNum === text.length) {\r\n    //         wordNum = 0;\r\n    //     }\r\n    //     const characters = text[wordNum].slice(0, count);\r\n    //     setCurrentWord(characters);\r\n    //     count++;\r\n    // }\r\n\r\n    // useEffect(() => {\r\n    //     setInterval(typeEffect, 250)\r\n    // }, [])\r\n    return (\r\n        <div>\r\n            {currentWord}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Typewriter\r\n"]},"metadata":{},"sourceType":"module"}