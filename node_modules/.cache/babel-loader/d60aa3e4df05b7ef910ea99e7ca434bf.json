{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adria\\\\Documents\\\\coding projects\\\\adriana-portfolio-react\\\\src\\\\components\\\\Typewriter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Typewriter = () => {\n  _s();\n\n  let text = ['Web Developer', 'Problem Solver', 'Team Player'];\n  let i = 0;\n  let j = 0;\n  const [currentWord, setCurrentWord] = useState([]);\n  const charIndex = useRef(0);\n  const textIndex = useRef(0);\n  const [isDeleting, setIsDeleting] = useState(false); // const loop = () => {\n  //     setIsDeleting(false);\n  // //     if (i < text.length) {\n  // //         // if we're typing and we haven't completed the word\n  // //         if (!isDeleting && j <= text[textIndex].length) {\n  // //             setCurrentWord((value) => value + text[textIndex].charAt(charIndex.current))\n  // //             j++;\n  // //         }\n  //         // if(isDeleting && charIndex <= text[textIndex].length) {\n  //         //     word.pop(text[textIndex][charIndex]);\n  //         //     charIndex--;\n  //         //     setCurrentWord(word.join(''));\n  //         // }\n  //         // if (charIndex == text[textIndex].length) {\n  //         //     setIsDeleting(true);\n  //         // }\n  //         // if (isDeleting && charIndex === 0) {\n  //         //     word = [];\n  //         //     setIsDeleting(false);\n  //         //     textIndex++;\n  //         //     if(textIndex === word.length) {\n  //         //         textIndex = 0;\n  //         //     }\n  //         // }\n  //     }\n  // }\n\n  const loopLoop = () => {\n    setIsDeleting(false);\n\n    if (textIndex.current < text.length) {\n      // if we're typing and we haven't completed the word\n      if (!isDeleting && charIndex.current < text[textIndex.current].length) {\n        setCurrentWord(value => value + text[textIndex.current].charAt(charIndex.current));\n        charIndex.current++;\n      }\n\n      if (isDeleting && charIndex.current <= text[textIndex.current].length) {\n        setCurrentWord(value => value - text[textIndex.current].charAt(charIndex.current));\n        charIndex.current--;\n      }\n\n      if (charIndex.current === text[textIndex.current].length) {\n        // setCurrentWord((value) => value)\n        setIsDeleting(true);\n      } // if(isDeleting && charIndex.current <= text[i].length) {\n      //     setCurrentWord((value) => value - text[i].charAt(charIndex.current))\n      //     charIndex.current -= 1;\n      // }\n\n    }\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      loopLoop();\n    }, 300); // return (() => {\n    //     clearTimeout(timeoutID);\n    // })\n  }, [currentWord]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: currentWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Typewriter, \"Kuuv+N6Qq1Aec0OaCqW/oauIDTo=\");\n\n_c = Typewriter;\nexport default Typewriter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Typewriter\");","map":{"version":3,"sources":["C:/Users/adria/Documents/coding projects/adriana-portfolio-react/src/components/Typewriter.js"],"names":["React","useState","useEffect","useRef","Typewriter","text","i","j","currentWord","setCurrentWord","charIndex","textIndex","isDeleting","setIsDeleting","loopLoop","current","length","value","charAt","setTimeout"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,QAAiD,OAAjD;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,MAAIC,IAAI,GAAG,CAAC,eAAD,EAAkB,gBAAlB,EAAoC,aAApC,CAAX;AAEA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AAEA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAMS,SAAS,GAAGP,MAAM,CAAC,CAAD,CAAxB;AACA,QAAMQ,SAAS,GAAGR,MAAM,CAAC,CAAD,CAAxB;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,KAAD,CAA5C,CATqB,CAWrB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,QAAMa,QAAQ,GAAG,MAAM;AACnBD,IAAAA,aAAa,CAAC,KAAD,CAAb;;AAEA,QAAIF,SAAS,CAACI,OAAV,GAAoBV,IAAI,CAACW,MAA7B,EAAqC;AACjC;AACA,UAAI,CAACJ,UAAD,IAAeF,SAAS,CAACK,OAAV,GAAoBV,IAAI,CAACM,SAAS,CAACI,OAAX,CAAJ,CAAwBC,MAA/D,EAAuE;AACnEP,QAAAA,cAAc,CAAEQ,KAAD,IAAWA,KAAK,GAAGZ,IAAI,CAACM,SAAS,CAACI,OAAX,CAAJ,CAAwBG,MAAxB,CAA+BR,SAAS,CAACK,OAAzC,CAApB,CAAd;AACAL,QAAAA,SAAS,CAACK,OAAV;AACH;;AAED,UAAGH,UAAU,IAAIF,SAAS,CAACK,OAAV,IAAqBV,IAAI,CAACM,SAAS,CAACI,OAAX,CAAJ,CAAwBC,MAA9D,EAAsE;AAClEP,QAAAA,cAAc,CAAEQ,KAAD,IAAWA,KAAK,GAAGZ,IAAI,CAACM,SAAS,CAACI,OAAX,CAAJ,CAAwBG,MAAxB,CAA+BR,SAAS,CAACK,OAAzC,CAApB,CAAd;AACAL,QAAAA,SAAS,CAACK,OAAV;AACH;;AAED,UAAIL,SAAS,CAACK,OAAV,KAAsBV,IAAI,CAACM,SAAS,CAACI,OAAX,CAAJ,CAAwBC,MAAlD,EAA0D;AACtD;AACAH,QAAAA,aAAa,CAAC,IAAD,CAAb;AACH,OAfgC,CAkBjC;AACA;AACA;AACA;;AACH;AACJ,GA1BD;;AA8BAX,EAAAA,SAAS,CAAC,MAAM;AACZiB,IAAAA,UAAU,CAAC,MAAM;AACbL,MAAAA,QAAQ;AAAG,KADL,EACO,GADP,CAAV,CADY,CAGZ;AACA;AACA;AACH,GANQ,EAMN,CAACN,WAAD,CANM,CAAT;AASA,sBACI;AAAA,2BACI;AAAA,gBAAKA;AAAL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAvFD;;GAAMJ,U;;KAAAA,U;AAyFN,eAAeA,UAAf","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\r\n\r\nconst Typewriter = () => {\r\n    let text = ['Web Developer', 'Problem Solver', 'Team Player'];\r\n\r\n    let i = 0;\r\n    let j = 0;\r\n\r\n    const [currentWord, setCurrentWord] = useState([]);\r\n    const charIndex = useRef(0);\r\n    const textIndex = useRef(0);\r\n    const [isDeleting, setIsDeleting] = useState(false);\r\n\r\n    // const loop = () => {\r\n    //     setIsDeleting(false);\r\n\r\n    // //     if (i < text.length) {\r\n    // //         // if we're typing and we haven't completed the word\r\n    // //         if (!isDeleting && j <= text[textIndex].length) {\r\n    // //             setCurrentWord((value) => value + text[textIndex].charAt(charIndex.current))\r\n    // //             j++;\r\n    // //         }\r\n\r\n    //         // if(isDeleting && charIndex <= text[textIndex].length) {\r\n    //         //     word.pop(text[textIndex][charIndex]);\r\n    //         //     charIndex--;\r\n    //         //     setCurrentWord(word.join(''));\r\n    //         // }\r\n\r\n    //         // if (charIndex == text[textIndex].length) {\r\n    //         //     setIsDeleting(true);\r\n    //         // }\r\n\r\n    //         // if (isDeleting && charIndex === 0) {\r\n    //         //     word = [];\r\n    //         //     setIsDeleting(false);\r\n    //         //     textIndex++;\r\n    //         //     if(textIndex === word.length) {\r\n    //         //         textIndex = 0;\r\n    //         //     }\r\n    //         // }\r\n    //     }\r\n       \r\n    // }\r\n\r\n    const loopLoop = () => {\r\n        setIsDeleting(false);\r\n        \r\n        if (textIndex.current < text.length) {\r\n            // if we're typing and we haven't completed the word\r\n            if (!isDeleting && charIndex.current < text[textIndex.current].length) {\r\n                setCurrentWord((value) => value + text[textIndex.current].charAt(charIndex.current))\r\n                charIndex.current++;\r\n            }\r\n\r\n            if(isDeleting && charIndex.current <= text[textIndex.current].length) {\r\n                setCurrentWord((value) => value - text[textIndex.current].charAt(charIndex.current))\r\n                charIndex.current--;\r\n            }\r\n\r\n            if (charIndex.current === text[textIndex.current].length) {\r\n                // setCurrentWord((value) => value)\r\n                setIsDeleting(true)\r\n            }\r\n\r\n\r\n            // if(isDeleting && charIndex.current <= text[i].length) {\r\n            //     setCurrentWord((value) => value - text[i].charAt(charIndex.current))\r\n            //     charIndex.current -= 1;\r\n            // }\r\n        }\r\n    }\r\n\r\n   \r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            loopLoop()}, 300)\r\n        // return (() => {\r\n        //     clearTimeout(timeoutID);\r\n        // })\r\n    }, [currentWord])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>{currentWord}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Typewriter\r\n"]},"metadata":{},"sourceType":"module"}