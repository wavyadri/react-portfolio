{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\adria\\\\Documents\\\\coding projects\\\\adriana-portfolio-react\\\\src\\\\components\\\\Typewriter.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Typewriter = () => {\n  _s();\n\n  let text = ['Web Developer', 'Problem Solver', 'Team Player']; // let word = []\n  // let textIndex = 0;\n\n  let i = 0;\n  let j = 0;\n  const [currentWord, setCurrentWord] = useState(''); // const charIndex = useRef(0);\n  // const textIndex = useRef(0);\n\n  const [isDeleting, setIsDeleting] = useState(false);\n\n  function loop() {\n    setIsDeleting(false);\n    setCurrentWord(word.join(''));\n\n    if (i < text.length) {\n      // if we're typing and we haven't completed the word\n      if (!isDeleting && j <= text[i].length) {\n        setCurrentWord(value => value + text[i][j]);\n        j++;\n      } // if(isDeleting && charIndex <= text[textIndex].length) {\n      //     word.pop(text[textIndex][charIndex]);\n      //     charIndex--;\n      //     setCurrentWord(word.join(''));\n      // }\n      // if (charIndex == text[textIndex].length) {\n      //     setIsDeleting(true);\n      // }\n      // if (isDeleting && charIndex === 0) {\n      //     word = [];\n      //     setIsDeleting(false);\n      //     textIndex++;\n      //     if(textIndex === word.length) {\n      //         textIndex = 0;\n      //     }\n      // }\n\n    }\n  }\n\n  useEffect(() => {\n    setTimeout(() => loop(), 300); // return (() => {\n    //     clearTimeout(timeoutID);\n    // })\n  }, [currentWord, text]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: currentWord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Typewriter, \"djNQDp/AyDwxt9u4mkDJYwCLxk4=\");\n\n_c = Typewriter;\nexport default Typewriter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Typewriter\");","map":{"version":3,"sources":["C:/Users/adria/Documents/coding projects/adriana-portfolio-react/src/components/Typewriter.js"],"names":["React","useState","useEffect","useRef","Typewriter","text","i","j","currentWord","setCurrentWord","isDeleting","setIsDeleting","loop","word","join","length","value","setTimeout"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,EAAoCC,MAApC,QAAiD,OAAjD;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,MAAIC,IAAI,GAAG,CAAC,eAAD,EAAkB,gBAAlB,EAAoC,aAApC,CAAX,CADqB,CAErB;AACA;;AAEA,MAAIC,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;AAEA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,CAAC,EAAD,CAA9C,CARqB,CASrB;AACA;;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,KAAD,CAA5C;;AAEA,WAASW,IAAT,GAAiB;AACbD,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAF,IAAAA,cAAc,CAACI,IAAI,CAACC,IAAL,CAAU,EAAV,CAAD,CAAd;;AAEA,QAAIR,CAAC,GAAGD,IAAI,CAACU,MAAb,EAAqB;AACjB;AACA,UAAI,CAACL,UAAD,IAAeH,CAAC,IAAIF,IAAI,CAACC,CAAD,CAAJ,CAAQS,MAAhC,EAAwC;AACpCN,QAAAA,cAAc,CAAEO,KAAD,IAAWA,KAAK,GAAGX,IAAI,CAACC,CAAD,CAAJ,CAAQC,CAAR,CAApB,CAAd;AACAA,QAAAA,CAAC;AACJ,OALgB,CAOjB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACH;AAEJ;;AAEDL,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,UAAU,CAAC,MAAML,IAAI,EAAX,EAAe,GAAf,CAAV,CADY,CAEZ;AACA;AACA;AACH,GALQ,EAKN,CAACJ,WAAD,EAAcH,IAAd,CALM,CAAT;AAQA,sBACI;AAAA,2BACI;AAAA,gBAAKG;AAAL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CA5DD;;GAAMJ,U;;KAAAA,U;AA8DN,eAAeA,UAAf","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\r\n\r\nconst Typewriter = () => {\r\n    let text = ['Web Developer', 'Problem Solver', 'Team Player'];\r\n    // let word = []\r\n    // let textIndex = 0;\r\n\r\n    let i = 0;\r\n    let j = 0;\r\n\r\n    const [currentWord, setCurrentWord] = useState('')\r\n    // const charIndex = useRef(0);\r\n    // const textIndex = useRef(0);\r\n    const [isDeleting, setIsDeleting] = useState(false)\r\n\r\n    function loop () {\r\n        setIsDeleting(false);\r\n        setCurrentWord(word.join(''))\r\n\r\n        if (i < text.length) {\r\n            // if we're typing and we haven't completed the word\r\n            if (!isDeleting && j <= text[i].length) {\r\n                setCurrentWord((value) => value + text[i][j])\r\n                j++;\r\n            }\r\n\r\n            // if(isDeleting && charIndex <= text[textIndex].length) {\r\n            //     word.pop(text[textIndex][charIndex]);\r\n            //     charIndex--;\r\n            //     setCurrentWord(word.join(''));\r\n            // }\r\n\r\n            // if (charIndex == text[textIndex].length) {\r\n            //     setIsDeleting(true);\r\n            // }\r\n\r\n            // if (isDeleting && charIndex === 0) {\r\n            //     word = [];\r\n            //     setIsDeleting(false);\r\n            //     textIndex++;\r\n            //     if(textIndex === word.length) {\r\n            //         textIndex = 0;\r\n            //     }\r\n            // }\r\n        }\r\n       \r\n    }\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => loop(), 300)\r\n        // return (() => {\r\n        //     clearTimeout(timeoutID);\r\n        // })\r\n    }, [currentWord, text])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h3>{currentWord}</h3>\r\n            {/* <h3>hello</h3> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Typewriter\r\n"]},"metadata":{},"sourceType":"module"}